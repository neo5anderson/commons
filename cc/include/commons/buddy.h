// Generated by Neo

#ifndef _COMMONS_BUDDY_H_
#define _COMMONS_BUDDY_H_

#include <commons/defines.h>
#include <commons/types.h>

namespace commons {
class Buddy {
   public:
    // (0, 30]
    Buddy(uint8_t level, buddy_clean_cb cb = nullptr, void* user = nullptr);
    virtual ~Buddy();

    int alloc(int size);
    void free(int offset);

    int size(int offset);
    void clean();

    inline int level() { return level_; }

   private:
    void mark(int index);
    int alloc_with_mark(int size);

    void combine(int index);
    void free_with_combine(int offset);

    int size_of_offset(int offset);
    void clean(int index, uint8_t level);

    void dump(char* info, int index, uint8_t level);
    void debug();

   private:
    void* user_;
    buddy_clean_cb cb_;

    void* mutex_;

    int size_;
    int left_;
    uint8_t level_;
    uint8_t* tree_;
};
} /* namespace: commons */

#endif /* _COMMONS_BUDDY_H_ */
