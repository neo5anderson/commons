// Generated by Neo

#ifndef _COMMONS_RING_QUEUE_H_
#define _COMMONS_RING_QUEUE_H_

#include <commons/defines.h>

#ifdef _POSIX_
#include <pthread.h>
#else
#error without macro `_POSIX_`
#endif

#include <commons/types.h>

namespace commons {
template <typename T>
class BlockedQueue;

class RingQueue {
   public:
    RingQueue(int capacity, ring_queue_cb cb, void* user);
    virtual ~RingQueue();
    
    int left();

    const void* head();
    const void* dequeue();
    bool enqueue(const void* data);
    
   private:
    void* user_;
    ring_queue_cb cb_;

    int head_;
    int tail_;
    int offset_;
    int capacity_;
    pthread_mutex_t* mutex_;

    void** pdata_;
    BlockedQueue<void>* queue_;

    pthread_t pid_;
    friend void* ring_dequeued(void* handle);

    ONLY_CUSTOM_CONSTRUCTION(RingQueue);
};
} /* namespace: commons */

#endif /* _COMMONS_RING_QUEUE_H_ */
